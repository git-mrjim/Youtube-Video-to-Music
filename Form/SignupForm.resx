<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Guna2BorderlessForm1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>9, 16</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+DwYA+yAWAPcq
        IwH0MCoA8zEtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN1n
        egDgYnEa3WR6LLO6+gD1OjYAAAAAAIwJEgCLBg4IjhAcP5AbLR+QGy0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzODQA8EBAAuZS
        Xgxw//8Azbb+ALKSyjCvk889GAAABFkAAAdaAAAHWgAAB2MAAAiCFSZDexgpXUoAAAVXAAAHUQAABjQA
        AAE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPQ9
        NwD5OCwI0X2gUamy/ymyHCA/xlt0vMljgMrYNze51Tg6utQ4ObrSNzi70TY4usUwM8CSFx3XxjEzus00
        NrrJMjO3rC08aXmA+Sd9hf8ofYX/KH2E/yh8hP8ofIP/KH2E/yh7g/8W////AGty/wAAAAAAAAAAAAAA
        AAAAAAAA9EM6AP8AAADBjsIPsbT9bbl7q9rXc5T/3XWR//pMSf/2TEr/9UxJ//NLSP/ySkf/6UVE/5od
        Iv/SOjr/vjAx/8o0M/+1QVv3enzy6HqD/+h7g//oeoP/6XqC/ul6gv7oeoP/63uD/7F4gf4Nd4D+AAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//PlAP//4QL46eaOzI6p/7CN0//Rf6b/+U1K//ZMSv/sR0X/3D4+/9g8
        PP/fQED/kBke/6EhJv+CERj/oyEk/5wxS/97atP/dX///3R9/P90ffz/dX/+/3Z//v92gP7/eIH+4HiB
        /h94gf4AAAAAAAAAAAAAAAAAAAAAAAAAAAD97+gA/e/oMPvs5ubUcHL/nTFL/7U9Tv/2TUr/2Tw9/68j
        Kf+xJCr/siUq/6kgJv94CxD/bAcM/5wfIv/lREH/tjlM/3tpz/93gv//cHj3/2Zu8v9zfPv/doD+/3N9
        /v90fv3ndH/9JnV//QAAAAAAAAAAAAAAAAAAAAAA/ezlAP3w6gD97+l4++zm/8ZiZP+GCRL/qyEm/+FB
        QP+mHyX/1Dk7//BJR//rRkT/1z1A/3orV/9hJFT/vDY+/+lFQf/GQE7/iX7i/4WD7P90dOn/aG/z/3uC
        +/+Ah///fIT+/3iC/u11f/4xdn/+AAAAAAAAAAAAAAAAAAAAAAD97ugA/e7nBv3v6bL76uT/wlte/3oG
        EP+sJCn/vS0w/7ssMP/1TEv/tScs/6EbIv/JPkv/fG3g/3By8f/OTmb/6UQ//8k/Sv+EcdH/h3fR/4R/
        4/94gP7/eYH+/3eA/v91f/7/dX/+83N+/jp0fv4AAAAAAAAAAAAAAAAAAAAAAP3u6AD+8OgV/O7p1OfY
        4v/RXmT/vUdB/85SSv+tJSn/yjY4/+lGRv+HGB7/bgUN/6EwRf95c+z/dnbx/9BNYv/oRED/zD1F/35s
        0v+Fiff/naD8/3iD//9ufP//bHr//2p3/v9qd/7obHj9KWx4/QAAAAAAAAAAAAAAAAAAAAAA/e7oAP/6
        6SHAuunibHDn/5xXn//3moX/+JV9/7gtL/+rJir/9k1L/8E2N/+iJyz/nFWW/3J6+/93e/X/yVNx/+hE
        QP/RPkL/f2fF/4WO/P+xtP//nYrg/6Zbnv+pXZ3/k4jl/5+h9OrNw+krzMLpAAAAAAAAAAAAAAAAAAAA
        AAD87ugA//npJJya6OVPVuj/VFfj/5R7xf/TpL7/zVps/5AXHP+6LjH/6kVC/9dTaP99Y7//gWy//5x3
        y/+taav/5kZE/9hBP/+lf7T/rKLg/696k/+mU3L/zFVl/9puff/w0tX/++ni9P7p4Dz+6eAAAAAAAAAA
        AAAAAAAAAAAAAP3v6AD/9egg5drp4bCn4f9yaNb/ambg/9N7n//PfaX/z0BF/5QbH/+JFBj/lUNg/5BD
        ZP+kV3j/vlNr/8Vxm//iS07/2T89/8GUsf+cfLb/hCEp/5VJbf/dW23/5nF5//ba2P/96uP2/OnhQPzp
        4gAAAAAAAAAAAAAAAAAAAAAA/e7oAP3u6BP/8urR9N/a/7x9qP95XMn/vF2R/+Nofv/rWGH/60VD/9Y7
        Of/GXHL/2Vdk/9k9Pf/dQED/02yH/+JNUf/ZPTz/3aKf//Tc1//lxsL/77m7/+pRVf/TXF3/+eHa//3q
        4/L96eI3/eniAAAAAAAAAAAAAAAAAAAAAAD97ugA/e3nBf7x67Dv1dH/xWqE/9ZWdf/pTVn/5WN2/+xY
        Yf/1S0j/7EVC/9pebf/jWWP/7kdD/+pHRf/ZaHz/40tN/9s9PP/ZmJf///Dp///u5v/Zvs//pkxs/65I
        Tv/02NL//uvk5P3p4iT96eIAAAAAAAAAAAAAAAAAAAAAAP3t5gD98OoA//Pte+7Qy//SXmv/+Fdb//1O
        Sf/yVlv/8E9R/9A1Nv+1Jir/syw0/7kvNv/gQD//6kdF/+ZMTf/mRUT/3D08/9WPjv/+7+n//evk/9q0
        t//Vpaf/8tbQ//zq4//96uPG/enhDv3p4QAAAAAAAAAAAAAAAAAAAAAAAAAAAP3v6QD/+fE66crI7+BQ
        Uv//YFr/5V5w/+Vdcf/LXHT/tkdJ/9ZWWv/SS1b/vDM8/7MpL//nREL/6UVC/+ZEQv/ePTz/04aF//3v
        6P/+7Ob//+7n///v6P/+7eb//evk//3r5JH+9fAA/ejhAAAAAAAAAAAAAAAAAAAAAAD5yrYA////AP//
        3Q3KweqyuHWy//mRif/MeqL/x3Cf/7FtlP/XhXz/xIWf/6Bxqf+VXqf/qkxf/+ZbVf/lR0j/5EVF/989
        PP/QfX3//O7o//3t5v/+7Ob//uzl//7s5f/96+X1/erkSf3r5AD83tUAAAAAAAAAAAAAAAAAAAAAAPzN
        tgD+zbMC/9O8a8elx6TEZZP8+Vta//hTUv/3UE7/wjQ1/783Nf/KSEv/rUdV/7Vbg//KfX7/6oqF/6pn
        rP/UVGf/5EtE/891dP/87ef//e3n//3t5v/+7Ob//uzl//7s5bz+6uMO/uvkAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAp6j8AJuj/xXnx8+L2YeBtuZDQvb+UE7/+k9N//lOTP/fQUD/nB4j/78wMf/NNzb/qiUm/7gz
        Mf/kWFf/vGeT/+J8ef/whG7/v2x///Pl6P/+7uf//e3n//7u5v/97Oby/uzmTv7q5AD+9fIAAAAAAAAA
        AAAAAAAAAAAAAAAAAACjpf4Aoaf/KLGi7pKqLzZb5UND9v5RT//6T03/+U5M//ZMSv/YPT3/qSYo/6Ei
        Jf+5Li//5ENB/+pGQ//pRkH/6ldL/+VqYP+ZdcT/18vo///h0v/56eb/4tfr/vrq5pD708Ee+sSsAvrM
        uAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ2f/gCXp/8Hw5bRRaIiKlfnRET6/FBO//pPTf/5Tkz/9kxK//VM
        Sf/xSkf/7UhF/+5IRv/sR0X/6kZE/+hFQ//mQ0L/5ENA/79hbf/pzcn//tjD/8nA7P+BifzT5cbNU/zQ
        vJ/60K4P/7f/APXSlgAAAAAAAAAAAAAAAAAAAAAAkBVwAPJLRAD/W1AOoh4kXOlGRfz7UE3//FBO//tP
        Tf/4TUv/901K//RLSP/ySkf/8EhG/+1HRf/rRkT/6UVD/+tHRP/pQ0H/yFZW//Xi2f/96NvywbjhsIyO
        7Yvxz8F6/NW8i/rToQ//1s4A9tOTAAAAAAAAAAAAAAAAAAAAAAAAAAAA7D42AP9TQwWiGx5BxzM12d9A
        QfTcPj/z2j0+89k8PfLYPT7010VF/tVGRv/TQ0T/0UJD/9BDQ//OQ0P/zUND/8hAQf/HdXX2+erkwP7w
        61P+8t8H/uRvBP3jqwn/77MD/+3BAP3ehgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnNCoA/3poANMm
        HAuaFRcylxsfRJIZH0CIERk7hQ4WOJEjKj3GiIl42a2rud63tNrgurfl4Ly55d+6t9rasrC/0KGgjeDC
        v0j/+vMP//fyAPzs5QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/6JjAP+qYwH/pXgE/8acA//wyAD/578A////AP///wD///8I////Gv///CT///sk////Gf//
        /wr///8B////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////3////54///mAA//4AAAD/AAAAfwAAAH8AAAB/AA
        AAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH8AAAB/AAAA/wAAAP4AAAD+AAAB/gAAAP4AAAD/AA
        AA/wAAAf+AAD//x4D/////////////////8=
</value>
  </data>
</root>